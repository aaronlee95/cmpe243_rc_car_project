/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKC_UART3_H
#define _MOCKC_UART3_H

#include "c_uart3.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockc_uart3_Init(void);
void Mockc_uart3_Destroy(void);
void Mockc_uart3_Verify(void);




#define uart3_getchar_IgnoreAndReturn(cmock_retval) uart3_getchar_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uart3_getchar_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define uart3_getchar_ExpectAnyArgsAndReturn(cmock_retval) uart3_getchar_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void uart3_getchar_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define uart3_getchar_ExpectAndReturn(byte, timeout_ms, cmock_retval) uart3_getchar_CMockExpectAndReturn(__LINE__, byte, timeout_ms, cmock_retval)
void uart3_getchar_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* byte, uint32_t timeout_ms, bool cmock_to_return);
typedef bool (* CMOCK_uart3_getchar_CALLBACK)(char* byte, uint32_t timeout_ms, int cmock_num_calls);
void uart3_getchar_StubWithCallback(CMOCK_uart3_getchar_CALLBACK Callback);
#define uart3_getchar_ReturnThruPtr_byte(byte) uart3_getchar_CMockReturnMemThruPtr_byte(__LINE__, byte, sizeof(*byte))
#define uart3_getchar_ReturnArrayThruPtr_byte(byte, cmock_len) uart3_getchar_CMockReturnMemThruPtr_byte(__LINE__, byte, (int)(cmock_len * (int)sizeof(*byte)))
#define uart3_getchar_ReturnMemThruPtr_byte(byte, cmock_size) uart3_getchar_CMockReturnMemThruPtr_byte(__LINE__, byte, cmock_size)
void uart3_getchar_CMockReturnMemThruPtr_byte(UNITY_LINE_TYPE cmock_line, char* byte, int cmock_size);
#define uart3_getchar_IgnoreArg_byte() uart3_getchar_CMockIgnoreArg_byte(__LINE__)
void uart3_getchar_CMockIgnoreArg_byte(UNITY_LINE_TYPE cmock_line);
#define uart3_getchar_IgnoreArg_timeout_ms() uart3_getchar_CMockIgnoreArg_timeout_ms(__LINE__)
void uart3_getchar_CMockIgnoreArg_timeout_ms(UNITY_LINE_TYPE cmock_line);
#define uart3_init_IgnoreAndReturn(cmock_retval) uart3_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uart3_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define uart3_init_ExpectAnyArgsAndReturn(cmock_retval) uart3_init_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void uart3_init_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define uart3_init_ExpectAndReturn(baudRate, rxQSize, txQSize, cmock_retval) uart3_init_CMockExpectAndReturn(__LINE__, baudRate, rxQSize, txQSize, cmock_retval)
void uart3_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int baudRate, int rxQSize, int txQSize, bool cmock_to_return);
typedef bool (* CMOCK_uart3_init_CALLBACK)(unsigned int baudRate, int rxQSize, int txQSize, int cmock_num_calls);
void uart3_init_StubWithCallback(CMOCK_uart3_init_CALLBACK Callback);
#define uart3_init_IgnoreArg_baudRate() uart3_init_CMockIgnoreArg_baudRate(__LINE__)
void uart3_init_CMockIgnoreArg_baudRate(UNITY_LINE_TYPE cmock_line);
#define uart3_init_IgnoreArg_rxQSize() uart3_init_CMockIgnoreArg_rxQSize(__LINE__)
void uart3_init_CMockIgnoreArg_rxQSize(UNITY_LINE_TYPE cmock_line);
#define uart3_init_IgnoreArg_txQSize() uart3_init_CMockIgnoreArg_txQSize(__LINE__)
void uart3_init_CMockIgnoreArg_txQSize(UNITY_LINE_TYPE cmock_line);
#define uart3_gets_IgnoreAndReturn(cmock_retval) uart3_gets_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uart3_gets_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define uart3_gets_ExpectAnyArgsAndReturn(cmock_retval) uart3_gets_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void uart3_gets_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define uart3_gets_ExpectAndReturn(pBuff, maxLen, timeout, cmock_retval) uart3_gets_CMockExpectAndReturn(__LINE__, pBuff, maxLen, timeout, cmock_retval)
void uart3_gets_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* pBuff, int maxLen, unsigned int timeout, bool cmock_to_return);
typedef bool (* CMOCK_uart3_gets_CALLBACK)(char* pBuff, int maxLen, unsigned int timeout, int cmock_num_calls);
void uart3_gets_StubWithCallback(CMOCK_uart3_gets_CALLBACK Callback);
#define uart3_gets_ReturnThruPtr_pBuff(pBuff) uart3_gets_CMockReturnMemThruPtr_pBuff(__LINE__, pBuff, sizeof(*pBuff))
#define uart3_gets_ReturnArrayThruPtr_pBuff(pBuff, cmock_len) uart3_gets_CMockReturnMemThruPtr_pBuff(__LINE__, pBuff, (int)(cmock_len * (int)sizeof(*pBuff)))
#define uart3_gets_ReturnMemThruPtr_pBuff(pBuff, cmock_size) uart3_gets_CMockReturnMemThruPtr_pBuff(__LINE__, pBuff, cmock_size)
void uart3_gets_CMockReturnMemThruPtr_pBuff(UNITY_LINE_TYPE cmock_line, char* pBuff, int cmock_size);
#define uart3_gets_IgnoreArg_pBuff() uart3_gets_CMockIgnoreArg_pBuff(__LINE__)
void uart3_gets_CMockIgnoreArg_pBuff(UNITY_LINE_TYPE cmock_line);
#define uart3_gets_IgnoreArg_maxLen() uart3_gets_CMockIgnoreArg_maxLen(__LINE__)
void uart3_gets_CMockIgnoreArg_maxLen(UNITY_LINE_TYPE cmock_line);
#define uart3_gets_IgnoreArg_timeout() uart3_gets_CMockIgnoreArg_timeout(__LINE__)
void uart3_gets_CMockIgnoreArg_timeout(UNITY_LINE_TYPE cmock_line);
#define uart3_puts_IgnoreAndReturn(cmock_retval) uart3_puts_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uart3_puts_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define uart3_puts_ExpectAnyArgsAndReturn(cmock_retval) uart3_puts_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void uart3_puts_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define uart3_puts_ExpectAndReturn(pString, timeout, cmock_retval) uart3_puts_CMockExpectAndReturn(__LINE__, pString, timeout, cmock_retval)
void uart3_puts_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* pString, unsigned int timeout, bool cmock_to_return);
typedef bool (* CMOCK_uart3_puts_CALLBACK)(const char* pString, unsigned int timeout, int cmock_num_calls);
void uart3_puts_StubWithCallback(CMOCK_uart3_puts_CALLBACK Callback);
#define uart3_puts_IgnoreArg_pString() uart3_puts_CMockIgnoreArg_pString(__LINE__)
void uart3_puts_CMockIgnoreArg_pString(UNITY_LINE_TYPE cmock_line);
#define uart3_puts_IgnoreArg_timeout() uart3_puts_CMockIgnoreArg_timeout(__LINE__)
void uart3_puts_CMockIgnoreArg_timeout(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
